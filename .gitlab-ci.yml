image: gradle:latest

stages:
  - terraform
  - build
  - prep
  - deploy

cache:
  key: gradle-cache
  paths:
    - .gradle/caches

variables:
  FF_USE_FASTZIP: 1

## Terraform anchors
.terraform: &terraform
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - terraform fmt -check -recursive -diff
    - cd "${CI_PROJECT_DIR}/terraform/environment/${env_name}"
    - gitlab-terraform init
    - gitlab-terraform validate
    - gitlab-terraform plan
    - gitlab-terraform plan-json
    - gitlab-terraform apply
  cache:
    key: "terraform-wonder-jvm-${env_name}"
    paths:
      - "${CI_PROJECT_DIR}/terraform/environment/${env_name}/.terraform"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/terraform/environment/${env_name}/plan.cache"
    reports:
      terraform: "${CI_PROJECT_DIR}/terraform/environment/${env_name}/plan.json"
  when: manual

## Terraform stages
terraform:
  <<: *terraform
  stage: terraform
  environment:
    name: dev
  variables:
    TF_STATE_NAME: dev
    env_name: dev

## Kotlin stages
build:
  stage: build
  script:
    - gradle build
  artifacts:
    paths:
      - build/libs/wonder.jar

## DNS stages
dns:
  image:
    name: 791841456797.dkr.ecr.eu-central-1.amazonaws.com/base:latest
  stage: build
  cache: {}
  script:
    - export IP_PRIVATE=$(aws --region eu-central-1 ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=wonder-jvm" --query 'Reservations[*].Instances[*].[PrivateIpAddress]' --output text)
    - echo $IP_PRIVATE > variables.env
    - cat variables.env
  artifacts:
    paths:
      - variables.env

dns:new:
  image:
    name: 791841456797.dkr.ecr.eu-central-1.amazonaws.com/base:latest
  stage: build
  script:
    - export IP_PRIVATE=$(aws --region eu-central-1 ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=wonder-jvm" --query 'Reservations[*].Instances[*].[PrivateIpAddress]' --output text)
    - echo host=$IP_PRIVATE > variables.env
    - export IP_PUBLIC=$(aws --region eu-central-1 ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=wonder-jvm" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)
    - |
      cat <<EOF > update-set.json
        {
          "Comment": "Update record",
          "Changes": [
            {
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "test.wonder.ac",
                "Type": "A",
                "TTL": 60,
                "ResourceRecords": [
                  {
                    "Value": "$IP_PUBLIC"
                  }
                ]
              }
            }
          ]
        }
      EOF
    - cat update-set.json
    - aws route53 change-resource-record-sets --hosted-zone-id Z01846671BQ8J0GUD8OPU --change-batch file://update-set.json
  artifacts:
    paths:
      - variables.env
  when: manual

## Deploy stages
deploy:
  image:
    name: 791841456797.dkr.ecr.eu-central-1.amazonaws.com/ssh:latest
  dependencies:
    - build
    - dns
  stage: deploy
  cache: {}
  script:
    - eval `ssh-agent -s`
    - echo "${SSH_PRIVATE_KEY}" | base64 -d | ssh-add - > /dev/null
    - |
      cat <<'EOF' > multi-scp.sh
        #!/bin/bash
        while read p; do
          echo "$p"
        done <variables.env
      EOF
    - chmod +x multi-scp.sh
    - cat multi-scp.sh && ls -la multi-scp.sh
    - ./multi-scp.sh
    #- scp -r -o StrictHostKeyChecking=no build/ ec2-user@$host:~
  # only:
  #   changes:
  #     - "**/*.{js,json,html,tsx,lock,gitignore}"
  when: manual

deploy:new:
  image:
    name: 791841456797.dkr.ecr.eu-central-1.amazonaws.com/ssh:latest
  dependencies:
    - build
    - dns
  stage: deploy
  cache: {}
  script:
    - source variables.env
    - echo $host && ls -lh build
    - eval `ssh-agent -s`
    - echo "${SSH_PRIVATE_KEY}" | base64 -d | ssh-add - > /dev/null
    - scp -r -o StrictHostKeyChecking=no build/ ec2-user@$host:~
    - |
      ssh -q -o BatchMode=yes -o StrictHostKeyChecking=no ec2-user@$host <<'ENDSSH'
        . /opt/nvm/nvm.sh
        pm2 delete all
        pm2 serve /home/ec2-user/build 8080 --name wonder-web --watch
      ENDSSH
  when: manual
